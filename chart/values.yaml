## Default values for minio instance creation.
## Note: to enable upgrade of minio instance, then values file has a number of values that will be
## deprecated in the future. Deprecation candidates will have an annotation in comments regarding the timeframe for deprecation.

hostname: bigbang.dev

# When true, upgradeTenants enables use of the V4.* Minio Operator CRD for creation of tenants is enabled.
# The default will be made TRUE in a future release.
upgradeTenants:
  enabled: true

annotations: {}
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is maintained for compatible upgrade with the 2.0.9 release.   The following service itens will be removed ina future release
# because the operator handles the service deployment in 4.x and beyond.
service:
  # Internal service name for minio instance.  This is the full name of the service used to connect to Minio from within the cluster.
  # If not specified, the service name will be the default full name of the minio instance.
  nameOverride: ""
  type: ClusterIP
  port: 9090

istio:
  enabled: false
  mtls:
    # STRICT = Allow only mutual TLS traffic
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    mode: STRICT
  console:
    enabled: true
    annotations: {}
    labels: {}
    gateways:
      - istio-system/main
    hosts:
      -  minio.{{ .Values.hostname }}
    service: ""
    port: ""
  api:
    enabled: true
    annotations: {}
    labels: {}
    gateways:
      - istio-system/main
    hosts:
      -  minio-api.{{ .Values.hostname }}
    service: ""
    port: ""

monitoring:
  enabled: false
  namespace: monitoring

networkPolicies:
  enabled: false
  controlPlaneCidr: 0.0.0.0/0
  ingressLabels:
    app: istio-ingressgateway
    istio: ingressgateway

openshift: false

## Secret with credentials to be used by MinIO Tenant
secrets:
  # create a kubernetes configuration secret object with the accessKey and secretKey as defined here.
  name: minio-creds-secret
  accessKey: minio
  secretKey: minio123

apiVersion: minio.min.io/v2

## MinIO Tenant Definition
tenant:
  # Tenant name
  name: minio
  ## Registry location and Tag to download MinIO Server image
  image:
    repository: registry1.dso.mil/ironbank/opensource/minio/minio
    tag: RELEASE.2022-10-15T19-57-03Z
    pullPolicy: IfNotPresent
  ## Customize namespace for tenant deployment
  #namespace: default
  ## Customize any private registry image pull secret.
  ## currently only one secret registry is supported
  imagePullSecret:
    name: private-registry
  ## If a scheduler is specified here, Tenant pods will be dispatched by specified scheduler.
  ## If not specified, the Tenant pods will be dispatched by default scheduler.
  scheduler: { }
  ## Secret name that contains additional environment variable configurations.
  ## The secret is expected to have a key named config.env containing environment variables exports.
  configuration:
    name: minio1-env-configuration
  ## Specification for MinIO Pool(s) in this Tenant.
  pools:
    ## Servers specifies the number of MinIO Tenant Pods / Servers in this pool.
    ## For standalone mode, supply 1. For distributed mode, supply 4 or more.
    ## Note that the operator does not support upgrading from standalone to distributed mode.
    - servers: 4
      ## custom name for the pool
      ## name: pool-0
      ## volumesPerServer specifies the number of volumes attached per MinIO Tenant Pod / Server.
      volumesPerServer: 4
      ## size specifies the capacity per volume
      size: 1Gi
      ## storageClass specifies the storage class name to be used for this pool
      storageClassName: ""
      ## Used to specify annotations for pods
      annotations: { }
      ## Used to specify labels for pods
      labels: { }
      ## Used to specify a toleration for a pod
      tolerations: [ ]
      ## nodeSelector parameters for MinIO Pods. It specifies a map of key-value pairs. For the pod to be
      ## eligible to run on a node, the node must have each of the
      ## indicated key-value pairs as labels.
      ## Read more here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
      nodeSelector: { }
      ## Affinity settings for MinIO pods. Read more about affinity
      ## here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
      affinity: { }
      ## Configure resource requests and limits for MinIO containers
      resources:
        requests:
          cpu: 250m
          memory: 2Gi
        limits:
          cpu: 250m
          memory: 2Gi

      ## Configure security context
      ## BB Note: Defaults for Ironbank image are 1001 for user, group, and fsGroup
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        runAsNonRoot: true
      topologySpreadConstraints: [ ]
      ## Configure Runtime Class
      # runtimeClassName: ""
  ## Mount path where PV will be mounted inside container(s).
  mountPath: /export
  ## Sub path inside Mount path where MinIO stores data.
  subPath: /data
  # pool metrics to be read by Prometheus
  metrics:
    enabled: false
    port: 9000
    protocol: http
  certificate:
    ## Use this field to provide one or more external CA certificates. This is used by MinIO
    ## to verify TLS connections with other applications:
    ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
    externalCaCertSecret: [ ]
    ## Use this field to provide a list of Secrets with external certificates. This can be used to configure
    ## TLS for MinIO Tenant pods. Create secrets as explained here:
    ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
    externalCertSecret: [ ]
    ## Enable automatic Kubernetes based certificate generation and signing as explained in
    ## https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster
    requestAutoCert: false
    ## This field is used only when "requestAutoCert" is set to true. Use this field to set CommonName
    ## for the auto-generated certificate. Internal DNS name for the pod will be used if CommonName is
    ## not provided. DNS name format is *.minio.default.svc.cluster.local
    certConfig: { }
  ## MinIO features to enable or disable in the MinIO Tenant
  ## https://github.com/minio/operator/blob/master/docs/crd.adoc#features
  features:
    bucketDNS: false
    domains: { }
  ## List of bucket names to create during tenant provisioning
  buckets: [ ]
  ## List of secret names to use for generating MinIO users during tenant provisioning
  users: [ ]
  ## PodManagement policy for MinIO Tenant Pods. Can be "OrderedReady" or "Parallel"
  ## Refer https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
  ## for details.
  podManagementPolicy: Parallel
  # Liveness Probe for container liveness. Container will be restarted if the probe fails.
  # Refer https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes.
  liveness: { }
  # Readiness Probe for container readiness. Container will be removed from service endpoints if the probe fails.
  # Refer https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  readiness: { }
  ## exposeServices defines the exposure of the MinIO object storage and Console services.
  ## service is exposed as a loadbalancer in k8s service.
  exposeServices: { }
  # kubernetes service account associated with a specific tenant
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  serviceAccountName: ""
  # Tenant scrape configuration will be added to prometheus managed by the prometheus-operator.
  prometheusOperator: false
  # Enable JSON, Anonymous logging for MinIO tenants.
  # Refer https://github.com/minio/operator/blob/master/pkg/apis/minio.min.io/v2/types.go#L303
  # How logs will look:
  # $ k logs minio1-pool-0-0 -n default
  # {"level":"INFO","errKind":"","time":"2022-04-07T21:49:33.740058549Z","message":"All MinIO sub-systems initialized successfully"}
  # Notice they are in JSON format to be consumed
  logging:
    anonymous: true
    json: true
    quiet: true
  ## serviceMetadata allows passing additional labels and annotations to MinIO and Console specific
  ## services created by the operator.
  serviceMetadata: { }
  ## Add environment variables to be set in MinIO container (https://github.com/minio/minio/tree/master/docs/config)
  env: [ ]
  ## PriorityClassName indicates the Pod priority and hence importance of a Pod relative to other Pods.
  ## This is applied to MinIO pods only.
  ## Refer Kubernetes documentation for details https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass/
  priorityClassName: ""
  ## Define configuration for KES (stateless and distributed key-management system)
  ## Refer https://github.com/minio/kes
  #kes:
  #  image: "" # minio/kes:v0.18.0
  #  env: [ ]
  #  replicas: 2
  #  configuration: |-
  #    address: :7373
  #    root: _ # Effectively disabled since no root identity necessary.
  #    tls:
  #      key: /tmp/kes/server.key   # Path to the TLS private key
  #      cert: /tmp/kes/server.crt # Path to the TLS certificate
  #      proxy:
  #        identities: []
  #        header:
  #          cert: X-Tls-Client-Cert
  #    policy:
  #      my-policy:
  #        paths:
  #        - /v1/key/create/*
  #        - /v1/key/generate/*
  #        - /v1/key/decrypt/*
  #        identities:
  #        - ${MINIO_KES_IDENTITY}
  #    cache:
  #      expiry:
  #        any: 5m0s
  #        unused: 20s
  #    log:
  #      error: on
  #      audit: off
  #    keys:
  #      ## KES configured with fs (File System mode) doesnt work in Kubernetes environments and it's not recommended
  #      ## use a real KMS
  #      # fs:
  #      #   path: "./keys" # Path to directory. Keys will be stored as files. Not Recommended for Production.
  #      vault:
  #        endpoint: "http://vault.default.svc.cluster.local:8200" # The Vault endpoint
  #        namespace: "" # An optional Vault namespace. See: https://www.vaultproject.io/docs/enterprise/namespaces/index.html
  #        prefix: "my-minio"    # An optional K/V prefix. The server will store keys under this prefix.
  #        approle:    # AppRole credentials. See: https://www.vaultproject.io/docs/auth/approle.html
  #          id: "<YOUR APPROLE ID HERE>"      # Your AppRole Role ID
  #          secret: "<YOUR APPROLE SECRET ID HERE>"  # Your AppRole Secret ID
  #          retry: 15s  # Duration until the server tries to re-authenticate after connection loss.
  #        tls:        # The Vault client TLS configuration for mTLS authentication and certificate verification
  #          key: ""     # Path to the TLS client private key for mTLS authentication to Vault
  #          cert: ""    # Path to the TLS client certificate for mTLS authentication to Vault
  #          ca: ""      # Path to one or multiple PEM root CA certificates
  #        status:     # Vault status configuration. The server will periodically reach out to Vault to check its status.
  #          ping: 10s   # Duration until the server checks Vault's status again.
  #      # aws:
  #      #   # The AWS SecretsManager key store. The server will store
  #      #   # secret keys at the AWS SecretsManager encrypted with
  #      #   # AWS-KMS. See: https://aws.amazon.com/secrets-manager
  #      #   secretsmanager:
  #      #     endpoint: ""   # The AWS SecretsManager endpoint      - e.g.: secretsmanager.us-east-2.amazonaws.com
  #      #     region: ""     # The AWS region of the SecretsManager - e.g.: us-east-2
  #      #     kmskey: ""     # The AWS-KMS key ID used to en/decrypt secrets at the SecretsManager. By default (if not set) the default AWS-KMS key will be used.
  #      #     credentials:   # The AWS credentials for accessing secrets at the AWS SecretsManager.
  #      #       accesskey: ""  # Your AWS Access Key
  #      #       secretkey: ""  # Your AWS Secret Key
  #      #       token: ""      # Your AWS session token (usually optional)
  #  imagePullPolicy: "IfNotPresent"
  #  externalCertSecret: null
  #  clientCertSecret: null
  #  ## Key name to be created on the KMS, default is "my-minio-key"
  #  keyName: ""
  #  resources: { }
  #  nodeSelector: { }
  #  affinity:
  #    nodeAffinity: { }
  #    podAffinity: { }
  #    podAntiAffinity: { }
  #  tolerations: [ ]
  #  annotations: { }
  #  labels: { }
  #  serviceAccountName: ""
  #  securityContext:
  #    runAsUser: 1000
  #    runAsGroup: 1000
  #    runAsNonRoot: true
  #    fsGroup: 1000
  ## Prometheus setup for MinIO Tenant.
  prometheus:
    image: "" # defaults to quay.io/prometheus/prometheus:latest
    env: [ ]
    sidecarimage: "" # defaults to alpine
    initimage: "" # defaults to busybox:1.33.1
    # Right now you need to disable Prometheus and logging by setting their disk capacity to false
    # Feature request has been added to disable this
    diskCapacityGB: false
    #Use Standard storage class for stable deployment
    #storageClassName: standard
    storageClassName: ""
    annotations: { }
    labels: { }
    nodeSelector: { }
    tolerations: [ ]
    affinity:
      nodeAffinity: { }
      podAffinity: { }
      podAntiAffinity: { }
    resources: { }
    serviceAccountName: ""
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      fsGroup: 1000
  ## LogSearch API setup for MinIO Tenant.
  log:
    image: "" # defaults to minio/operator:v4.4.17
    env: [ ]
    resources: { }
    nodeSelector: { }
    affinity:
      nodeAffinity: { }
      podAffinity: { }
      podAntiAffinity: { }
    tolerations: [ ]
    annotations: { }
    labels: { }
    audit:
      # Right now you need to disable Prometheus and logging by setting their disk capacity to false
      # Feature request has been added to disable this
      diskCapacityGB: false
    ## Postgres setup for LogSearch API
    db:
      image: "" # defaults to library/postgres
      env: [ ]
      initimage: "" # defaults to busybox:1.33.1
      volumeClaimTemplate:
        metadata: { }
        spec:
          #Use Standard storage class for stable deployment
          #storageClassName: standard
          storageClassName: ""
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
      resources: { }
      nodeSelector: { }
      affinity:
        nodeAffinity: { }
        podAffinity: { }
        podAntiAffinity: { }
      tolerations: [ ]
      annotations: { }
      labels: { }
      serviceAccountName: ""
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        runAsNonRoot: true
        fsGroup: 999
    serviceAccountName: ""
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      fsGroup: 1000

ingress:
  api:
    enabled: false
    ingressClassName: ""
    labels: { }
    annotations: { }
    tls: [ ]
    host: minio.local
    path: /
    pathType: Prefix
  console:
    enabled: false
    ingressClassName: ""
    labels: { }
    annotations: { }
    tls: [ ]
    host: minio-console.local
    path: /
    pathType: Prefix

bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_url: 'http://{{ include "minio-operator.fullname" . | trim }}-console:{{ include "minio-operator.servicePort" . | trim }}/login'
    secretEnvs:
      - name: cypress_secretkey
        valueFrom:
          secretKeyRef:
            name: "{{ .Values.secrets.name }}"
            key: secretkey
      - name: cypress_accesskey
        valueFrom:
          secretKeyRef:
            name: "{{ .Values.secrets.name }}"
            key: accesskey
  scripts:
    image: registry1.dso.mil/ironbank/opensource/minio/mc:RELEASE.2022-02-26T03-58-31Z
    envs:
      MINIO_PORT: '80'
      MINIO_HOST: 'http://minio'
    secretEnvs:
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ .Values.secrets.name }}"
            key: secretkey
      - name: ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ .Values.secrets.name }}"
            key: accesskey
